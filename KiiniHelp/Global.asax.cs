using System;
using System.Web;
using System.Web.Security;

namespace KiiniHelp
{
    public class Global : HttpApplication
    {
        void Application_Start(object sender, EventArgs e)
        {
            // Código que se ejecuta al iniciar la aplicación
            
        }

        void Application_End(object sender, EventArgs e)
        {
            //  Código que se ejecuta al cerrarse la aplicación

        }

        void Application_Error(object sender, EventArgs e)
        {
            Exception ex = this.Server.GetLastError();
            throw new Exception(ex.Message);
            //if (ex is HttpException)
            //{
            //    HttpException httpEx = (HttpException)ex;

            //    if (httpEx.GetHttpCode() == 401)
            //    {
            //        Response.Redirect("YourPage.aspx");
            //    }
            //}
        }
        //{
            //// Código que se ejecuta cuando se produce un error no controlado
            //// Get last error from the server
            //Exception exc = Server.GetLastError();

            //// Handle exceptions generated by Button 1
            //if (exc is InvalidOperationException)
            //{
            //    // Pass the error on to the Generic Error page
            //    Server.Transfer("GenericErrorPage.aspx", true);
            //}

            //// Handle exceptions generated by Button 2
            //else if (exc is ArgumentOutOfRangeException)
            //{
            //    // Give the user some information, but
            //    // stay on the default page
            //    Response.Write("<h2>Default Page Error</h2>\n");
            //    Response.Write("<p>Provide as much information here as is " +
            //      "appropriate to show to the client.</p>\n");
            //    Response.Write("Return to the <a href='Default.aspx'>" +
            //        "Default Page</a>\n");

            //    // Log the exception and notify system operators
            //    //ExceptionUtility.LogException(exc, "DefaultPage");
            //    //ExceptionUtility.NotifySystemOps(exc);

            //    // Clear the error from the server
            //    Server.ClearError();
            //}
            //else
            //{
            //    // Pass the error on to the default global handler
            //    Response.Write("<h2>Default Page Error</h2>\n");
            //    Response.Write("<p>Provide as much information here as is " +
            //      "appropriate to show to the client.</p>\n");
            //    Response.Write("Return to the <a href='Default.aspx'>" +
            //        "Default Page</a>\n");

            //    // Log the exception and notify system operators
            //    //ExceptionUtility.LogException(exc, "DefaultPage");
            //    //ExceptionUtility.NotifySystemOps(exc);

            //    // Clear the error from the server
            //    Server.ClearError();
            //}
        //}

        void Session_End(object sender, EventArgs e)
        {
            if (Session["UserData"] != null)
            {
                Session.RemoveAll();
                Session.Clear();
                Session.Abandon();
                //Response.Cookies.Add(new HttpCookie(FormsAuthentication.FormsCookieName, ""));
                FormsAuthentication.RedirectToLoginPage();
                //FormsAuthentication.SignOut();
            }
        }

        public static void Terminar()
        {
            if (HttpContext.Current.Session["UserData"] != null)
            {
                HttpContext.Current.Session.RemoveAll();
                HttpContext.Current.Session.Clear();
                HttpContext.Current.Session.Abandon();
                //Response.Cookies.Add(new HttpCookie(FormsAuthentication.FormsCookieName, ""));
                FormsAuthentication.RedirectToLoginPage();
                //FormsAuthentication.SignOut();
            }
        }
    }
}
