using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web.UI;
using System.Web.UI.WebControls;
using KiiniHelp.ServiceMascaraAcceso;
using KiiniNet.Entities.Cat.Mascaras;
using KinniNet.Business.Utils;
using Telerik.Web.UI;

namespace KiiniHelp.UserControls.ReportesGraficos.Formularios
{
    public partial class UcReporteDetalleFormulario : UserControl
    {
        private readonly ServiceMascarasClient _servicioMascara = new ServiceMascarasClient();
        private List<string> _lstError = new List<string>();

        private List<string> Alerta
        {
            set
            {
                if (value.Any())
                {
                    string error = value.Aggregate("<ul>", (current, s) => current + ("<li>" + s + "</li>"));
                    error += "</ul>";
                    ScriptManager.RegisterClientScriptBlock(Page, typeof(Page), "ScriptErrorAlert", "ErrorAlert('Error','" + error + "');", true);
                }
            }
        }
        private DataTable Lista
        {
            get { return (DataTable)Session["DatosFormulario"]; }
            set { Session["DatosFormulario"] = value; }
        }

        private int IdMascara
        {
            get { return int.Parse(hfIdFormulario.Value); }
            set
            {
                hfIdFormulario.Value = value.ToString();
                Mascara mascara = _servicioMascara.ObtenerMascaraCaptura(value);
                if (mascara != null)
                {
                    Nombre = mascara.Descripcion;
                }
            }

        }

        private string Nombre
        {
            get { return hfNombreformulario.Value; }
            set { hfNombreformulario.Value = value; }
        }

        public object GetDataTable()
        {
            try
            {
                Lista = _servicioMascara.ObtenerReporteMascara(IdMascara, ucFiltroFechasConsultas.RangoFechas);
                return Lista;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }

        }
        private void LoadDataForrgResult()
        {
            try
            {
                lblTituloFormulario.Text = _servicioMascara.ObtenerMascaraCaptura(IdMascara).Descripcion;
                object lst = GetDataTable();
                lblTotal.Text = string.Format("{0} formularios completados", ((DataTable)lst).Rows.Count);
                rgResult.DataSource = lst;
                rgResult.Rebind();
                rgExport.DataSource = lst;
                rgExport.Rebind();
                foreach (GridColumn column in rgResult.MasterTableView.AutoGeneratedColumns)
                {
                    column.FilterCheckListEnableLoadOnDemand = true;
                    if (column.UniqueName == "FechaHoraAlta")
                    {
                        column.FilterCheckListEnableLoadOnDemand = false;
                        column.EnableHeaderContextMenu = false;
                        column.FilterCheckListEnableLoadOnDemand = false;
                    }
                }
                rgResult.ClientSettings.Scrolling.AllowScroll = true;

            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            try
            {
                if (!IsPostBack)
                {

                    ucFiltroFechasConsultas.LlenaFechas();
                    if (Request.Params["idMascara"] != null)
                    {
                        IdMascara = int.Parse(Request.Params["idMascara"]);
                        LoadDataForrgResult();
                    }
                    else
                        Response.Redirect("~/Users/ReportesGraficos/Formularios/FrmFormularios.aspx");
                }

            }
            catch (Exception ex)
            {
                if (_lstError == null)
                {
                    _lstError = new List<string>();
                }
                _lstError.Add(ex.Message);
                Alerta = _lstError;
            }
        }
        protected void rgResult_PageSizeChanged(object sender, GridPageSizeChangedEventArgs e)
        {
            try
            {
                LoadDataForrgResult();

            }
            catch (Exception ex)
            {
                if (_lstError == null)
                {
                    _lstError = new List<string>();
                }
                _lstError.Add(ex.Message);
                Alerta = _lstError;
            }
        }

        protected void rgResult_PageIndexChanged(object sender, GridPageChangedEventArgs e)
        {
            try
            {
                LoadDataForrgResult();

            }
            catch (Exception ex)
            {
                if (_lstError == null)
                {
                    _lstError = new List<string>();
                }
                _lstError.Add(ex.Message);
                Alerta = _lstError;
            }
        }

        protected void rgResult_SortCommand(object sender, GridSortCommandEventArgs e)
        {
            try
            {
                LoadDataForrgResult();

            }
            catch (Exception ex)
            {
                if (_lstError == null)
                {
                    _lstError = new List<string>();
                }
                _lstError.Add(ex.Message);
                Alerta = _lstError;
            }
        }

        protected void rgResult_NeedDataSource(object sender, GridNeedDataSourceEventArgs e)
        {
            try
            {
                (sender as RadGrid).DataSource = GetDataTable();

            }
            catch (Exception ex)
            {
                if (_lstError == null)
                {
                    _lstError = new List<string>();
                }
                _lstError.Add(ex.Message);
                Alerta = _lstError;
            }
        }

        protected void rgResult_OnFilterCheckListItemsRequested(object sender, GridFilterCheckListItemsRequestedEventArgs e)
        {
            try
            {
                IGridDataColumn column = (IGridDataColumn)e.Column;
                {
                    string dataField = column.GetActiveDataField();

                    DataView data = new DataView(Lista);
                    DataTable selected = data.ToTable(Lista.TableName, true, dataField);
                    e.ListBox.DataSource = selected;
                    e.ListBox.DataKeyField = dataField;
                    e.ListBox.DataTextField = dataField;
                    e.ListBox.DataValueField = dataField;
                    e.ListBox.DataBind();
                }

            }
            catch (Exception ex)
            {
                if (_lstError == null)
                {
                    _lstError = new List<string>();
                }
                _lstError.Add(ex.Message);
                Alerta = _lstError;
            }
        }

        protected void rgResult_ItemCommand(object sender, GridCommandEventArgs e)
        {
            try
            {
                if (e.CommandName == RadGrid.ExportToExcelCommandName)
                {
                    rgResult.ExportSettings.Excel.Format = (GridExcelExportFormat)Enum.Parse(typeof(GridExcelExportFormat), "Xlsx");
                    rgResult.ExportSettings.IgnorePaging = true;
                    rgResult.ExportSettings.ExportOnlyData = true;
                    rgResult.ExportSettings.FileName = Nombre;
                    rgResult.ExportSettings.OpenInNewWindow = true;
                    rgResult.MasterTableView.ExportToExcel();
                }

            }
            catch (Exception ex)
            {
                if (_lstError == null)
                {
                    _lstError = new List<string>();
                }
                _lstError.Add(ex.Message);
                Alerta = _lstError;
            }
        }

        protected void rgResult_BiffExporting(object sender, GridBiffExportingEventArgs e)
        {
            try
            {
                e.ExportStructure.Tables[0].Columns[1].Style.BackColor = System.Drawing.Color.LightGray;


            }
            catch (Exception ex)
            {
                if (_lstError == null)
                {
                    _lstError = new List<string>();
                }
                _lstError.Add(ex.Message);
                Alerta = _lstError;
            }
        }

        protected void btnDownload_OnClick(object sender, EventArgs e)
        {
            try
            {
                //rgResult.DataSource = GetDataTable();
                rgExport.ExportSettings.Excel.Format = (GridExcelExportFormat)Enum.Parse(typeof(GridExcelExportFormat), "Xlsx");
                rgExport.ExportSettings.IgnorePaging = true;
                rgExport.ExportSettings.ExportOnlyData = true;
                rgExport.ExportSettings.FileName = BusinessCadenas.Cadenas.FormatoBaseDatos(Nombre);
                rgExport.ExportSettings.OpenInNewWindow = true;
                //rgResult.ExportToExcel();
                rgExport.MasterTableView.ExportToExcel();
            }
            catch (Exception ex)
            {
                if (_lstError == null)
                {
                    _lstError = new List<string>();
                }
                _lstError.Add(ex.Message);
                Alerta = _lstError;
            }
        }

        protected void rgResult_OnItemDataBound(object sender, GridItemEventArgs e)
        {
            try
            {
                if (e.Item is GridDataItem)
                {
                    GridDataItem item = (GridDataItem)e.Item;
                    foreach (TableCell cell in item.Cells)
                    {
                        if (cell.Text.Length > 20)
                        {
                            cell.ToolTip = cell.Text.ToString(); // Set the Tooltip
                            cell.Text = (cell.Text).Substring(0, 20) + "...";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                if (_lstError == null)
                {
                    _lstError = new List<string>();
                }
                _lstError.Add(ex.Message);
                Alerta = _lstError;
            }
        }

        protected void btnBuscar_OnClick(object sender, EventArgs e)
        {
            try
            {
                LoadDataForrgResult();
            }
            catch (Exception ex)
            {
                if (_lstError == null)
                {
                    _lstError = new List<string>();
                }
                _lstError.Add(ex.Message);
                Alerta = _lstError;
            }
        }
    }
}